{
  "openapi": "3.0.1",
  "info": {
    "title": "VC Publisher",
    "description": "Publisher API https://vc.systems",
    "contact": {
      "email": "info@vc.systems"
    },
    "version": "1.0.0"
  },
  "externalDocs": {
    "description": "virtualcitySYSTEMS",
    "url": "https://vc.systems"
  },
  "paths": {
    "/api/v1/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "username",
                  "password"
                ],
                "properties": {
                  "username": {
                    "type": "string",
                    "description": "Username"
                  },
                  "password": {
                    "type": "string",
                    "description": "Password",
                    "format": "password"
                  },
                  "algorithm": {
                    "type": "string",
                    "description": "hashing algorithm for passing hashed passwords",
                    "enum": [
                      "sha-256"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login Successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Login failed",
            "content": {}
          },
          "429": {
            "description": "Rate Limit Exceeded",
            "content": {}
          }
        }
      }
    },
    "/api/v1/logout": {
      "get": {
        "tags": [
          "auth"
        ],
        "responses": {
          "201": {
            "description": "Logout Successful"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/logout-all": {
      "get": {
        "tags": [
          "auth"
        ],
        "responses": {
          "201": {
            "description": "Logout Successful"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/user": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Creates a new User, can only be done while logged in with the admin role",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Match failed, can also be thrown, if the username or email already exists",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Could not create User or other internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/user/whoami": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get the user identified by the current token. Returns empty if not logged in.",
        "responses": {
          "200": {
            "description": "User",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/User"
                    },
                    {
                      "type": "object"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Returns a filted & sorted paginated list of Users, admin role is needed.",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "Equal filter",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Like filter searches occurrences of the query parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/createdAt"
          },
          {
            "$ref": "#/components/parameters/createdBy"
          },
          {
            "$ref": "#/components/parameters/updatedAt"
          },
          {
            "$ref": "#/components/parameters/updatedBy"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of Users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedList"
                    }
                  ],
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/user-profiles": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Returns a paginated list of user profiles.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of Users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedList"
                    }
                  ],
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/UserProfile"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/user/{userId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "returns a User, admin role is needed.",
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "description": "User",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "User"
        ],
        "summary": "Updates an existing User, admin role is needed.",
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          }
        ],
        "requestBody": {
          "description": "User UpdateUser",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User Successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "deletes a User, admin role is needed.",
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "description": "User has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/database": {
      "post": {
        "tags": [
          "Database"
        ],
        "summary": "Creates a new Database, can only be done while logged in with the admin role",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatabaseCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Database Successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Database"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Could not create Database or other internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/databases": {
      "get": {
        "tags": [
          "Database"
        ],
        "summary": "Returns a filted & sorted paginated list of Databases, admin role is needed.",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Like filter searches occurrences of the query parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Equal filter",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "PostGIS",
                  "Oracle"
                ]
              }
            }
          },
          {
            "name": "username",
            "in": "query",
            "description": "Equal filter",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "host",
            "in": "query",
            "description": "Equal filter",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "port",
            "in": "query",
            "description": "Equal filter",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "database",
            "in": "query",
            "description": "Equal filter",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/parameters/createdAt"
          },
          {
            "$ref": "#/components/parameters/createdBy"
          },
          {
            "$ref": "#/components/parameters/updatedAt"
          },
          {
            "$ref": "#/components/parameters/updatedBy"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of Databases",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedList"
                    },
                    {
                      "type": "object",
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Database"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/database/{databaseId}": {
      "get": {
        "tags": [
          "Database"
        ],
        "summary": "returns a Database, admin role is needed.",
        "parameters": [
          {
            "$ref": "#/components/parameters/databaseId"
          }
        ],
        "responses": {
          "200": {
            "description": "Database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Database"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Database"
        ],
        "summary": "Updates an existing Database, admin role is needed.",
        "parameters": [
          {
            "$ref": "#/components/parameters/databaseId"
          }
        ],
        "requestBody": {
          "description": "DatabaseUpdate",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatabaseUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Database Successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Database"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Database"
        ],
        "summary": "deletes a Database, admin role is needed.",
        "parameters": [
          {
            "$ref": "#/components/parameters/databaseId"
          }
        ],
        "responses": {
          "200": {
            "description": "Database has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Creates a new Project and sets the creating user as project manager unless you provide a managerId. Can only be done while logged in as a super user.",
        "parameters": [
          {
            "name": "managerId",
            "in": "query",
            "description": "Optional user to set as admin. If not provided the creating user will be instated as project manager",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Could not create Project or other internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/projects": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Returns a filtered & sorted paginated list of Projects. Requires MEMBER or MANAGER permission on the projects.",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Like filter searches occurrences of the query parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Like filter searches occurrences of the query parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/createdAt"
          },
          {
            "$ref": "#/components/parameters/createdBy"
          },
          {
            "$ref": "#/components/parameters/updatedAt"
          },
          {
            "$ref": "#/components/parameters/updatedBy"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/bbox"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of Projects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedList"
                    },
                    {
                      "type": "object",
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Project"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "returns a Project, requires MEMBER or MANAGER permission on this project.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "responses": {
          "200": {
            "description": "Project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Updates an existing Project, requires MANAGER permission on this project.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "requestBody": {
          "description": "ProjectUpdate",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project Successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "deletes a Project, admin role is needed.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "responses": {
          "200": {
            "description": "Project has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseModel"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/summary": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "returns a statistics for the Project, requires MEMBER or MANAGER permission on this project.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "responses": {
          "200": {
            "description": "ProjectSummary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectSummary"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/databases": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "returns a list of databases associated with the project. Requires MANAGER permission on the Project",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of Databases associated with this Project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DatabaseWithoutSecret"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/database/{databaseId}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "returns a Database, which is associated with this project. Requires MANAGER permission on the Project",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/databaseId"
          }
        ],
        "responses": {
          "200": {
            "description": "Database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Database"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "adds the Database to the Project. Requires MANAGER permission on the Project",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/databaseId"
          }
        ],
        "responses": {
          "201": {
            "description": "Database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Database"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "summary": "removes the Database from the Project. Requires MANAGER permission on the Project",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/databaseId"
          }
        ],
        "responses": {
          "200": {
            "description": "Database has been removed from the Project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/datasource": {
      "post": {
        "tags": [
          "Datasource"
        ],
        "summary": "Creates a new Datasource, requires MANAGER permission on the Project",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasourceCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Datasource successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Datasource"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Could not create Datasource or other internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/datasources": {
      "get": {
        "tags": [
          "Datasource"
        ],
        "summary": "Returns a filtered/sorted/paginated list of Datasources. Requires MEMBER or MANAGER permission on the project.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Like filter searches occurrences of the query parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "Like filter searches occurrences of the query parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uri",
            "in": "query",
            "description": "Like filter searches occurrences of the query parameter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Equal filter",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DatasourcesTypeEnum"
              }
            }
          },
          {
            "$ref": "#/components/parameters/createdAt"
          },
          {
            "$ref": "#/components/parameters/createdBy"
          },
          {
            "$ref": "#/components/parameters/updatedAt"
          },
          {
            "$ref": "#/components/parameters/updatedBy"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/bbox"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a paginated list of Datasources",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedList"
                    },
                    {
                      "type": "object",
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Datasource"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/datasources/summary": {
      "get": {
        "tags": [
          "Datasource"
        ],
        "summary": "returns a summary for all datasources from this Project, requires MEMBER or MANAGER permission on this project.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Equal filter",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DatasourcesTypeEnum"
              }
            }
          },
          {
            "$ref": "#/components/parameters/createdBy"
          },
          {
            "$ref": "#/components/parameters/updatedBy"
          }
        ],
        "responses": {
          "200": {
            "description": "DatasourcesSummary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasourcesSummary"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/datasource/{datasourceId}": {
      "get": {
        "tags": [
          "Datasource"
        ],
        "summary": "returns a Datasource, requires MEMBER or MANAGER permission on the project.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/datasourceId"
          }
        ],
        "responses": {
          "200": {
            "description": "Datasource",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Datasource"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Datasource"
        ],
        "summary": "Updates an existing Datasource, requires MANAGER permission on the project.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/datasourceId"
          },
          {
            "name": "updateData",
            "in": "query",
            "required": false,
            "description": "If this call should set data updated",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "DatasourceUpdate",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatasourceUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Datasource successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Datasource"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Datasource"
        ],
        "summary": "deletes a Datasource, requires MANAGER permission on the project. Deleting a datasource with an internal source will delete the corresponding data bucket entry too, if it is not in use.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/datasourceId"
          },
          {
            "name": "force",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Datasource has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BaseModel"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/datasource/{datasourceId}/download": {
      "get": {
        "tags": [
          "Datasource"
        ],
        "summary": "Downloads the datasource as a gziped tarball, requires MEMBER or MANAGER permission on the project.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/datasourceId"
          }
        ],
        "responses": {
          "200": {
            "description": "Datasource",
            "content": {
              "application/gzip": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/datasource/{datasourceId}/publish": {
      "put": {
        "tags": [
          "Datasource",
          "Publish"
        ],
        "summary": "Publishes the datasource with the given parameters",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/datasourceId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CommonPublishParameters"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "Datasource",
          "Publish"
        ],
        "summary": "gets the publish task. if you do not provide a task id, its the latest publish task.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/datasourceId"
          },
          {
            "name": "taskId",
            "in": "query",
            "required": false,
            "description": "An optional task id, otherwise the latest task will be returned",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "an object containing the requested task or null if it was never published",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "task": {
                      "$ref": "#/components/schemas/Task"
                    },
                    "job": {
                      "$ref": "#/components/schemas/Job"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Datasource",
          "Publish"
        ],
        "summary": "aborts the last publishing job, if it is running",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/datasourceId"
          }
        ],
        "responses": {
          "204": {
            "description": "successfully aborted a running job or the job had already terminated"
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/datasource/{datasourceId}/config": {
      "get": {
        "tags": [
          "Datasource"
        ],
        "summary": "returns a configuration object which can be used in the vcmap/core app configuration",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/datasourceId"
          }
        ],
        "responses": {
          "200": {
            "description": "an object containing the layer configuration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/tasks": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "Get a paginated list of tasks of this project. Requires getJob permission on the project",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/labels"
          },
          {
            "$ref": "#/components/parameters/priority"
          },
          {
            "$ref": "#/components/parameters/jobType"
          },
          {
            "name": "status",
            "description": "Filters by the status of the lastJob",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of Tasks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedList"
                    }
                  ],
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Task"
                          },
                          {
                            "type": "object",
                            "required": [
                              "lastJob"
                            ],
                            "properties": {
                              "lastJob": {
                                "$ref": "#/components/schemas/LastJob"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/task": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "description": "creates a task, requires access to the job on the project",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly created task task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/task/sync": {
      "post": {
        "tags": [
          "Jobs"
        ],
        "description": "creates a task, requires access to the job on the project",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncTaskCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the newly created task task",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status"
                  ],
                  "properties": {
                    "status": {
                      "type": "number"
                    },
                    "output": {
                      "type": "object",
                      "additionalProperties": {}
                    },
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/task/{taskId}": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "description": "Get a single task. Requires getJob permissions on the project",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Jobs"
        ],
        "description": "Updates the given task. requires access on said tasks jobType.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Returns the task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/jobs": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "summary": "Get a paginated list of jobs of this project. Requires getJob permission on the project",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/labels"
          },
          {
            "$ref": "#/components/parameters/priority"
          },
          {
            "$ref": "#/components/parameters/jobType"
          },
          {
            "$ref": "#/components/parameters/status"
          },
          {
            "name": "taskId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "filter: operators `gt:`,`gte:`,`lt:`,`lte`",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "filter: operators `gt:`,`gte:`,`lt:`,`lte`",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of Jobs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedList"
                    }
                  ],
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Job"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/job/{jobId}": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "description": "Get a single job. Requires getJob permissions on the project",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/jobId"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the job",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Jobs"
        ],
        "summary": "deletes a job. requires admin permissions.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/jobId"
          }
        ],
        "responses": {
          "200": {
            "description": "the number of deleted items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/job/{jobId}/abort": {
      "put": {
        "tags": [
          "Jobs"
        ],
        "description": "Aborts a job. Requires abortJob permission on the project",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/jobId"
          }
        ],
        "responses": {
          "201": {
            "description": "Job aborted"
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/job/{jobId}/operation-sets": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "description": "Gets the operations of a job. Requires getJob permissions on the project",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/jobId"
          },
          {
            "$ref": "#/components/parameters/status"
          },
          {
            "$ref": "#/components/parameters/operationSetIdQuery"
          },
          {
            "name": "jobStage",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an an array of operations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OperationSet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/job/{jobId}/operations": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "description": "Gets the operations of a job. Requires getJob permissions on the project",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/jobId"
          },
          {
            "$ref": "#/components/parameters/status"
          },
          {
            "$ref": "#/components/parameters/operationSetIdQuery"
          },
          {
            "name": "operationSetStage",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "operationType",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an an array of operations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Operation"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/job/{jobId}/debug-package": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "description": "Downloads a debug tar archive. This contains the jobs parameters and operation parameters & logs",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/jobId"
          }
        ],
        "responses": {
          "200": {
            "description": "The debug archive",
            "content": {
              "application/gzip": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/job/{jobId}/operation/{operationId}": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "description": "Gets the operations of a job. Requires getJob permissions on the project",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/jobId"
          },
          {
            "$ref": "#/components/parameters/operationId"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a single operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/job/{jobId}/operation/{operationId}/outputs": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "description": "Gets the operation output only. Requires getJob permissions on the project",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/jobId"
          },
          {
            "$ref": "#/components/parameters/operationId"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a single operations output object",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/job/{jobId}/operation/{operationId}/log": {
      "get": {
        "tags": [
          "Jobs"
        ],
        "description": "Gets the operations log. Requires getJob permissions on the project",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/jobId"
          },
          {
            "$ref": "#/components/parameters/operationId"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the log of the operation, gzipped",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/data-buckets": {
      "get": {
        "tags": [
          "DataBucket"
        ],
        "summary": "gets a paginated list of all data buckets in the project. requires getDataBucket permission on the project.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "name": "name",
            "in": "query",
            "description": "like filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "paginated list of data buckets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedList"
                    },
                    {
                      "type": "object",
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/DataBucket"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/data-bucket": {
      "post": {
        "tags": [
          "DataBucket"
        ],
        "summary": "Creates a new data bucket. requires createDataBucket permission on the project.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataBucketCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "data bucket successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataBucket"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/data-bucket/{dataBucketId}": {
      "get": {
        "tags": [
          "DataBucket"
        ],
        "summary": "gets a data bucket. requires getDataBucket permission on the project.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/dataBucketId"
          }
        ],
        "responses": {
          "200": {
            "description": "the requested data bucket",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataBucket"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "DataBucket"
        ],
        "summary": "Updates an existing data bucket. requires editDataBucket permission on the project.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/dataBucketId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataBucketUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "data bucket successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataBucket"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "DataBucket"
        ],
        "summary": "deletes a data bucket. requires deleteDataBucket permission on the project. this may fail, if datasources are referencing the data bucket.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/dataBucketId"
          },
          {
            "$ref": "#/components/parameters/force"
          }
        ],
        "responses": {
          "200": {
            "description": "number of deleted items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/data-bucket/{dataBucketId}/object": {
      "get": {
        "tags": [
          "DataBucket"
        ],
        "summary": "Gets information on a bucket object. Requires getDataBucket permission on the project.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/dataBucketId"
          },
          {
            "$ref": "#/components/parameters/objectKey"
          }
        ],
        "responses": {
          "200": {
            "description": "data bucket successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataBucketObject"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "post": {
        "tags": [
          "DataBucket"
        ],
        "summary": "Creates an empty bucket object. requires editDataBucket permission on the project. pass overwrite to overwrite an existing file",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/dataBucketId"
          },
          {
            "$ref": "#/components/parameters/overwrite"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataBucketObject"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "data bucket object successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataBucketObject"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "DataBucket"
        ],
        "summary": "deletes a data bucket object. requires editDataBucket permission on the project. if the object is in use, you must pass force.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/dataBucketId"
          },
          {
            "$ref": "#/components/parameters/objectKey"
          },
          {
            "$ref": "#/components/parameters/force"
          }
        ],
        "responses": {
          "204": {
            "description": "data bucket object deleted"
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/data-bucket/{dataBucketId}/objects": {
      "get": {
        "tags": [
          "DataBucket"
        ],
        "summary": "lists the content of the given prefix (or root if none is provided). requires getDataBucket permission on the project",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/dataBucketId"
          },
          {
            "name": "prefix",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ending",
            "description": "the ending to filter by, for instance '.txt'. its case insensitive and should match the output of node:path extname.",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "alpha",
                "type"
              ]
            }
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of data bucket objects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedList"
                    },
                    {
                      "type": "object",
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/DataBucketObject"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/data-bucket/{dataBucketId}/upload": {
      "post": {
        "tags": [
          "DataBucket"
        ],
        "summary": "uploads a file to the data bucket. requires editDataBucket permission on the project",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/dataBucketId"
          },
          {
            "$ref": "#/components/parameters/overwrite"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Upload successful"
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/data-bucket/{dataBucketId}/download-file": {
      "get": {
        "tags": [
          "DataBucket"
        ],
        "summary": "Downloads a bucket object. Requires getDataBucket permission on the project.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/dataBucketId"
          },
          {
            "$ref": "#/components/parameters/objectKey"
          }
        ],
        "responses": {
          "200": {
            "description": "data object.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/data-bucket/{dataBucketId}/download": {
      "get": {
        "tags": [
          "DataBucket"
        ],
        "summary": "Downloads a bucket object or folder as a tar.gz file. Requires getDataBucket permission on the project.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/dataBucketId"
          },
          {
            "$ref": "#/components/parameters/objectKey"
          }
        ],
        "responses": {
          "200": {
            "description": "data bucket object stream.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/credentials": {
      "get": {
        "tags": [
          "Project Credentials"
        ],
        "summary": "Returns a filtered/sorted/paginated list of Project Credentials, requires MEMBER or MANAGER permission on the project.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": [
                "fs",
                "ftp",
                "sftp",
                "s3"
              ]
            }
          },
          {
            "name": "gzip",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "defaultPath",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "loginId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "host",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "noTLS",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "region",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endpoint",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "params",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "$ref": "#/components/parameters/createdAt"
          },
          {
            "$ref": "#/components/parameters/createdBy"
          },
          {
            "$ref": "#/components/parameters/updatedAt"
          },
          {
            "$ref": "#/components/parameters/updatedBy"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of Project Credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedList"
                    }
                  ],
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ProjectCredentialResponse"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/credential": {
      "post": {
        "tags": [
          "Project Credentials"
        ],
        "summary": "Creates a new Project Credential, can only be done while logged in with the admin role",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "requestBody": {
          "description": "Project Credential request body",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCredentialCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project Credential successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCredentialResponse"
                }
              }
            }
          },
          "400": {
            "description": "Required field is missing"
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/credential/{projectCredentialId}": {
      "put": {
        "tags": [
          "Project Credentials"
        ],
        "summary": "Updates an existing Project Credential, can only be done while logged in with the admin role",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "name": "projectCredentialId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Project Credential request body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCredentialUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project Credential successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCredentialResponse"
                }
              }
            }
          },
          "400": {
            "description": "Required field is missing"
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Project Credentials"
        ],
        "summary": "deletes a Project Credential, can only be done while logged in with the admin role.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "name": "projectCredentialId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project Credential has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCredentialResponse"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "Project Credentials"
        ],
        "summary": "returns a ProjectCredential, requires MEMBER or MANAGER permission on the project.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "name": "projectCredentialId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project Credential",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectCredentialResponse"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/scenarios": {
      "get": {
        "tags": [
          "Scenario"
        ],
        "summary": "Gets a paginated list of scenarios. requires getScenario on the scenario in question",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "name": "name",
            "in": "query",
            "description": "like filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "public",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "paginated list of scenarios",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedList"
                    },
                    {
                      "type": "object",
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "allOf": [
                              {
                                "$ref": "#/components/schemas/BaseModel"
                              },
                              {
                                "type": "object",
                                "required": [
                                  "projectId",
                                  "public",
                                  "name",
                                  "properties"
                                ],
                                "properties": {
                                  "projectId": {
                                    "type": "string"
                                  },
                                  "name": {
                                    "type": "string"
                                  },
                                  "description": {
                                    "type": "string"
                                  },
                                  "public": {
                                    "type": "boolean"
                                  },
                                  "properties": {
                                    "type": "object",
                                    "additionalProperties": {}
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/scenario": {
      "post": {
        "tags": [
          "Scenario"
        ],
        "summary": "Creates a new scenario. Requires createScenario permissions on the project. If no memberId is provided, the calling user is granted the member role by default.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "name": "memberId",
            "in": "query",
            "description": "an optional user id to assign as the initial scenario member. if not provided, the calling user is set as the member",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScenarioCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "the created scenario",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Scenario"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/scenario/{scenarioId}": {
      "get": {
        "tags": [
          "Scenario"
        ],
        "summary": "gets a scenario. requires getScenario permission on the scenario.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/scenarioId"
          }
        ],
        "responses": {
          "200": {
            "description": "the requested scenario",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Scenario"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Scenario"
        ],
        "summary": "updates an existing scenario. requires editScenario permission on the scenario.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/scenarioId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScenarioUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "the updated scenario",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Scenario"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Scenario"
        ],
        "summary": "deletes a scenario. requires deleteScenario permission on the scenario.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/scenarioId"
          }
        ],
        "responses": {
          "200": {
            "description": "the number of deleted items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/scenario/{scenarioId}/download": {
      "get": {
        "tags": [
          "Scenario"
        ],
        "summary": "gets a scenario. requires getScenario permission on the scenario.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/scenarioId"
          }
        ],
        "responses": {
          "200": {
            "description": "the requested scenario as a gzipped tar archive",
            "content": {
              "application/gzip": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/scenario/{scenarioId}/publish": {
      "put": {
        "tags": [
          "Scenario",
          "Publish"
        ],
        "summary": "Publishes the scenario with the given parameters",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/scenarioId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CommonPublishParameters"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "global": {
                        "type": "boolean"
                      },
                      "lib": {
                        "type": "boolean"
                      },
                      "plugins": {
                        "type": "boolean"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "the created task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "Scenario",
          "Publish"
        ],
        "summary": "gets the publish task. if you do not provide a task id, its the latest publish task.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/scenarioId"
          },
          {
            "name": "taskId",
            "in": "query",
            "required": false,
            "description": "An optional task id, otherwise the latest task will be returned",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "an object containing the requested task & its job or null if it was never published",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "task": {
                      "$ref": "#/components/schemas/Task"
                    },
                    "job": {
                      "$ref": "#/components/schemas/Job"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Scenario",
          "Publish"
        ],
        "summary": "aborts the last publishing job, if it is running",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/scenarioId"
          }
        ],
        "responses": {
          "204": {
            "description": "successfully aborted a running job or the job had already terminated"
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/apps": {
      "get": {
        "tags": [
          "App"
        ],
        "summary": "gets a paginated list of all apps in the project. with getApp permission on the project returns all apps, else all apps with getApp permission.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "name": "name",
            "in": "query",
            "description": "like filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of the requested apps.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedList"
                    },
                    {
                      "type": "object",
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/App"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/app": {
      "post": {
        "tags": [
          "App"
        ],
        "summary": "Creates a new app. requires createApp permission on the project.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/memberId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "app successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/app/{appId}": {
      "get": {
        "tags": [
          "App"
        ],
        "summary": "gets a app. requires getApp permission on the project or the app.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/appId"
          }
        ],
        "responses": {
          "200": {
            "description": "the requested app",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "App"
        ],
        "summary": "Updates an existing app. requires editApp permission on the project or the app.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/appId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "app successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/App"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "App"
        ],
        "summary": "deletes an app. requires deleteApp permission on the project or the app.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/appId"
          }
        ],
        "responses": {
          "200": {
            "description": "Project has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/app/{appId}/compiled": {
      "get": {
        "tags": [
          "App"
        ],
        "summary": "gets a app. requires getApp permission on the project or the app. If passed edit, the app configurator plugin will be added in the passed semver. Pass * for latest",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/appId"
          },
          {
            "name": "edit",
            "in": "query",
            "description": "Can either be a semver range or true for latest version of the app-configurator plugin",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "the requested app",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompiledApp"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/app/{appId}/download": {
      "get": {
        "tags": [
          "App"
        ],
        "summary": "gets an app as a tar ball. requires getApp permission on the project or the app.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/appId"
          }
        ],
        "responses": {
          "200": {
            "description": "the requested app as a gzipped tarball",
            "content": {
              "application/gzip": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/app/{appId}/publish": {
      "put": {
        "tags": [
          "App",
          "Publish"
        ],
        "summary": "Publishes the app with the given parameters",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/appId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CommonPublishParameters"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "lib": {
                        "type": "boolean"
                      },
                      "plugins": {
                        "type": "boolean"
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "the created task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "App",
          "Publish"
        ],
        "summary": "gets the publish task. if you do not provide a task id, its the latest publish task.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/appId"
          },
          {
            "name": "taskId",
            "in": "query",
            "required": false,
            "description": "An optional task id, otherwise the latest task will be returned",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "an object containing the requested task or null if it was never published",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "task": {
                      "$ref": "#/components/schemas/Task"
                    },
                    "job": {
                      "$ref": "#/components/schemas/Job"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "App",
          "Publish"
        ],
        "summary": "aborts the last publishing job, if it is running",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/appId"
          }
        ],
        "responses": {
          "204": {
            "description": "successfully aborted a running job or the job had already terminated"
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/app/{appId}/apache-config": {
      "get": {
        "tags": [
          "App"
        ],
        "summary": "gets an apps apache config. requires editApp permission on the project or the app.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/appId"
          }
        ],
        "responses": {
          "200": {
            "description": "the requested apps apache config",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppApacheConfig"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "App"
        ],
        "summary": "Updates the apache config of an app. requires editApp permission on the project or the app.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/appId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppApacheConfigUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "app apache config successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppApacheConfig"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/app/{appId}/users": {
      "get": {
        "tags": [
          "App"
        ],
        "summary": "gets paginated entries of principals & their roles. requires getACL for the project or app.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/appId"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/queryRoleId"
          },
          {
            "$ref": "#/components/parameters/queryPermissions"
          },
          {
            "$ref": "#/components/parameters/queryPrincipalId"
          }
        ],
        "responses": {
          "200": {
            "description": "List of principalIds with the roles and permissions the principal has on this resource",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedList"
                    }
                  ],
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PrincipalWithPermissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/modules": {
      "get": {
        "tags": [
          "App"
        ],
        "summary": "gets a paginated list of all modules in the project. with getModule permission on the project returns all modules, else all apps with getModule permission.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "name": "name",
            "in": "query",
            "description": "like filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of the requested modules.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedList"
                    },
                    {
                      "type": "object",
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Module"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/module": {
      "post": {
        "tags": [
          "App"
        ],
        "summary": "Creates a new module. requires createModule permission on the project.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/memberId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModuleCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "module successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Module"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/module/{moduleId}": {
      "get": {
        "tags": [
          "App"
        ],
        "summary": "gets a module. requires getModule permission on the project or module.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/moduleId"
          }
        ],
        "responses": {
          "200": {
            "description": "the requested module",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Module"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "App"
        ],
        "summary": "Updates an existing module. requires editModule permission on the project or module.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/moduleId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModuleUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "module successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Module"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "App"
        ],
        "summary": "deletes an module. requires deleteModule permission on the project or module. This will fail, if the module is still in use.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/moduleId"
          },
          {
            "$ref": "#/components/parameters/force"
          }
        ],
        "responses": {
          "200": {
            "description": "Project has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/module/{moduleId}/users": {
      "get": {
        "tags": [
          "App"
        ],
        "summary": "gets paginated entries of principals & their roles. requires getACL for the project or module.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/moduleId"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/queryRoleId"
          },
          {
            "$ref": "#/components/parameters/queryPermissions"
          },
          {
            "$ref": "#/components/parameters/queryPrincipalId"
          }
        ],
        "responses": {
          "200": {
            "description": "List of principalIds with the roles and permissions the principal has on this resource",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedList"
                    }
                  ],
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PrincipalWithPermissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/project/{projectId}/addons": {
      "get": {
        "tags": [
          "Addon"
        ],
        "summary": "Gets a paginated list of addons. requires job access on the project.",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "name": "type",
            "in": "query",
            "description": "only return of this type",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AddonTypeEnum"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "paginated list of addons",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedList"
                    },
                    {
                      "type": "object",
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "required": [
                              "type"
                            ],
                            "properties": {
                              "type": {
                                "$ref": "#/components/schemas/AddonTypeEnum"
                              },
                              "validity": {
                                "type": "string",
                                "format": "date-time"
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/iam/roles": {
      "get": {
        "tags": [
          "IAM"
        ],
        "summary": "Get roles as a paginated list",
        "parameters": [
          {
            "$ref": "#/components/parameters/queryPermissions"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a paginated list of Roles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedList"
                    }
                  ],
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Role"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/iam/role/{roleId}": {
      "get": {
        "tags": [
          "IAM"
        ],
        "summary": "Get roles",
        "parameters": [
          {
            "$ref": "#/components/parameters/roleId"
          }
        ],
        "responses": {
          "200": {
            "description": "Role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/iam/role/{roleId}/{resourceId}": {
      "put": {
        "tags": [
          "IAM"
        ],
        "summary": "grant role to all principals on resource. requires grant role on the resource",
        "parameters": [
          {
            "$ref": "#/components/parameters/roleId"
          },
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/principalIds"
          }
        ],
        "responses": {
          "201": {
            "description": "Role granted"
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "IAM"
        ],
        "summary": "revoke a role for all principals on resource. requires revoke role on the resource",
        "parameters": [
          {
            "$ref": "#/components/parameters/roleId"
          },
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/principalIds"
          }
        ],
        "responses": {
          "200": {
            "description": "Role revoked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/iam/resource-permission/{principalId}": {
      "get": {
        "tags": [
          "IAM"
        ],
        "summary": "gets paginated entries of resources & the roles of the quering principal. requires being the on the resource for which you are filtering",
        "parameters": [
          {
            "$ref": "#/components/parameters/principalId"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/queryRoleId"
          },
          {
            "$ref": "#/components/parameters/queryResourceId"
          },
          {
            "$ref": "#/components/parameters/queryPermissions"
          }
        ],
        "responses": {
          "200": {
            "description": "List of resourcesIds with the roles and permissions of the principal",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedList"
                    }
                  ],
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "resourceId",
                          "roles"
                        ],
                        "properties": {
                          "resourceId": {
                            "type": "string"
                          },
                          "roles": {
                            "type": "array",
                            "items": {
                              "$ref": "#/components/schemas/RoleSummary"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/iam/principal-permission/{resourceId}": {
      "get": {
        "tags": [
          "IAM"
        ],
        "summary": "gets paginated entries of principals & their roles. requires getACL for a provided resource or super user permissions.",
        "parameters": [
          {
            "$ref": "#/components/parameters/resourceId"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/queryRoleId"
          },
          {
            "$ref": "#/components/parameters/queryPermissions"
          },
          {
            "$ref": "#/components/parameters/queryPrincipalId"
          }
        ],
        "responses": {
          "200": {
            "description": "List of principalIds with the roles and permissions the principal has on this resource",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedList"
                    }
                  ],
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PrincipalWithPermissions"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/iam/super-users": {
      "get": {
        "tags": [
          "IAM"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "summary": "get all super users. requires super user",
        "responses": {
          "200": {
            "description": "Returns a list of Users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedList"
                    }
                  ],
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "userId"
                        ],
                        "properties": {
                          "userId": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/iam/super-user/{userId}": {
      "get": {
        "tags": [
          "IAM"
        ],
        "summary": "checks if a user is a super user. If the user is not the same as the userId, the user must be super too",
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an object containing isSuper",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "isSuperUser"
                  ],
                  "properties": {
                    "isSuperUser": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "IAM"
        ],
        "summary": "grants super users privileges. requires super user",
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          }
        ],
        "responses": {
          "201": {
            "description": "Privileges granted"
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "IAM"
        ],
        "summary": "revokes super users privileges. requires super user",
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "description": "Privileges revoked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/login-credentials": {
      "get": {
        "tags": [
          "Login Credentials"
        ],
        "summary": "Returns a filtered & sorted paginated list of Login Credentials, admin role is needed",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Like Filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Like Filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "access",
            "in": "query",
            "description": "Like Filter",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/createdAt"
          },
          {
            "$ref": "#/components/parameters/createdBy"
          },
          {
            "$ref": "#/components/parameters/updatedAt"
          },
          {
            "$ref": "#/components/parameters/updatedBy"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of Login Credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedList"
                    }
                  ],
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/LoginCredentialResponse"
                      }
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/login-credential": {
      "post": {
        "tags": [
          "Login Credentials"
        ],
        "summary": "Creates a new DataBucket, can only be done while logged in with the admin role",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginCredentialRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Login Credential successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginCredentialResponse"
                }
              }
            }
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "409": {
            "description": "Conflict",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/login-credential/{loginCredentialId}": {
      "get": {
        "tags": [
          "Login Credentials"
        ],
        "summary": "Get login credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/loginCredentialId"
          }
        ],
        "responses": {
          "200": {
            "description": "Login Credential",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginCredentialResponse"
                }
              }
            }
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Login Credentials"
        ],
        "summary": "Deletes an Login Credential, can only be done while logged in with the admin role",
        "parameters": [
          {
            "$ref": "#/components/parameters/loginCredentialId"
          }
        ],
        "responses": {
          "200": {
            "description": "Login Credential has been deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedResponse"
                }
              }
            }
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Login Credentials"
        ],
        "summary": "Updates an existing Login Credential, can only be done while logged in with the admin role",
        "parameters": [
          {
            "$ref": "#/components/parameters/loginCredentialId"
          }
        ],
        "requestBody": {
          "description": "Login Credential request body",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginCredentialRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login Credential successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginCredentialResponse"
                }
              }
            }
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "404": {
            "description": "ObjectNotFound",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/map-plugins": {
      "get": {
        "tags": [
          "Map Plugins"
        ],
        "summary": "gets a paginated list of map plugins. requires a logged in user.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/mapVersion"
          },
          {
            "$ref": "#/components/parameters/versionRange"
          },
          {
            "name": "name",
            "in": "query",
            "description": "equals filter",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "paginated list of map plugins",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedList"
                    },
                    {
                      "type": "object",
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/PluginRegistryEntry"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/map-plugin": {
      "get": {
        "tags": [
          "Map Plugins"
        ],
        "summary": "gets a single map plugin. requires a logged in user",
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/mapVersion"
          },
          {
            "$ref": "#/components/parameters/versionRange"
          }
        ],
        "responses": {
          "200": {
            "description": "the requested plugin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PluginRegistryEntry"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/map-plugin/upload": {
      "post": {
        "tags": [
          "Map Plugins"
        ],
        "summary": "uploads a single tarball package as a plugin. requires super user permissions.",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Upload successful"
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/map-plugin/upload-bundle": {
      "post": {
        "tags": [
          "Map Plugins"
        ],
        "summary": "uploads a bundle of plugins. requires super user permissions",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Upload successful"
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/admin/tasks": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get a paginated list of tasks. Requires super user permission",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/labels"
          },
          {
            "$ref": "#/components/parameters/priority"
          },
          {
            "$ref": "#/components/parameters/jobType"
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "description": "Filters by the status of the lastJob",
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "projectId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of Tasks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedList"
                    }
                  ],
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "allOf": [
                          {
                            "$ref": "#/components/schemas/Task"
                          },
                          {
                            "type": "object",
                            "required": [
                              "lastJob"
                            ],
                            "properties": {
                              "lastJob": {
                                "$ref": "#/components/schemas/LastJob"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/admin/jobs": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Get a paginated list of jobs of this project. Requires admin permissions.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "$ref": "#/components/parameters/labels"
          },
          {
            "$ref": "#/components/parameters/priority"
          },
          {
            "$ref": "#/components/parameters/jobType"
          },
          {
            "$ref": "#/components/parameters/status"
          },
          {
            "name": "taskId",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startTime",
            "in": "query",
            "description": "filter: operators `gt:`,`gte:`,`lt:`,`lte`",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "endTime",
            "in": "query",
            "description": "filter: operators `gt:`,`gte:`,`lt:`,`lte`",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a list of Jobs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedList"
                    }
                  ],
                  "required": [
                    "items"
                  ],
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Job"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/admin/addon": {
      "post": {
        "tags": [
          "Addon"
        ],
        "summary": "Creates or updates an addon. Requires sudo permissions.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddonCreate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "the created addon",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Addon"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/admin/addons": {
      "get": {
        "tags": [
          "Addon"
        ],
        "summary": "Gets a paginated list of addons. requires sudo permissions.",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/orderBy"
          },
          {
            "name": "type",
            "in": "query",
            "description": "only return of this type",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AddonTypeEnum"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "paginated list of addons",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PaginatedList"
                    },
                    {
                      "type": "object",
                      "required": [
                        "items"
                      ],
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Addon"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/admin/addon/{addonId}": {
      "get": {
        "tags": [
          "Addon"
        ],
        "summary": "gets a addon. requires sudo permissions.",
        "parameters": [
          {
            "$ref": "#/components/parameters/addonId"
          }
        ],
        "responses": {
          "200": {
            "description": "the requested addon",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Addon"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Addon"
        ],
        "summary": "updates an existing addon. requires sudo permissions.",
        "parameters": [
          {
            "$ref": "#/components/parameters/addonId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddonUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "the updated addon",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Addon"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Addon"
        ],
        "summary": "deletes a addon. requires sudo permissions.",
        "parameters": [
          {
            "$ref": "#/components/parameters/addonId"
          }
        ],
        "responses": {
          "200": {
            "description": "the number of deleted items",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeletedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/admin/addon/{addonId}/activate": {
      "get": {
        "tags": [
          "Addon"
        ],
        "summary": "validates an addon. requires sudo permissions.",
        "parameters": [
          {
            "$ref": "#/components/parameters/addonId"
          }
        ],
        "responses": {
          "200": {
            "description": "the requested addon with validity set to a date if valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Addon"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/admin/addon/{addonId}/validate": {
      "get": {
        "tags": [
          "Addon"
        ],
        "summary": "validates an addon. requires sudo permissions.",
        "parameters": [
          {
            "$ref": "#/components/parameters/addonId"
          }
        ],
        "responses": {
          "200": {
            "description": "the requested addon with validity set to a date if valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Addon"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/admin/addon/{addonId}/revoke": {
      "get": {
        "tags": [
          "Addon"
        ],
        "summary": "revokes the validity of an addon. requires sudo permissions.",
        "parameters": [
          {
            "$ref": "#/components/parameters/addonId"
          }
        ],
        "responses": {
          "200": {
            "description": "the requested addon with validity set to undefined.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Addon"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/admin/addon/{addonId}/offline-license": {
      "get": {
        "tags": [
          "Addon"
        ],
        "summary": "requsts an offline license for the addon. requires sudo permissions. only works for point cloud addon.",
        "parameters": [
          {
            "$ref": "#/components/parameters/addonId"
          }
        ],
        "responses": {
          "200": {
            "description": "the offline license file",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/admin/legacy-datasource-cleanup": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Gets a list of unused top level entries in the datasource data directory. Must be super user.",
        "responses": {
          "200": {
            "description": "The entries as found on disk",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "entry": {
                        "type": "string"
                      },
                      "lastModified": {
                        "type": "string",
                        "format": "date-time"
                      }
                    },
                    "required": [
                      "entry",
                      "lastModified"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "Put a list of entries to mark as deleted in the datasource data folder. Requires admin permissions.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "entries": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "entries"
                ]
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "Entries have been marked for deletion"
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/admin/data-bucket-cleanup-task": {
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "Changes the CRON schedule of the data bucket cleanup task",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CronSchedule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The edited task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/api/v1/admin/run-data-bucket-cleanup": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "Requests the running of a data bucket cleanup task, regardless of the cron definition",
        "responses": {
          "200": {
            "description": "The created task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Task"
                }
              }
            }
          },
          "400": {
            "description": "Match failed",
            "content": {}
          },
          "401": {
            "description": "Authentication failed",
            "content": {}
          },
          "403": {
            "description": "Permission denied",
            "content": {}
          },
          "500": {
            "description": "Internal server errors.",
            "content": {}
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "parameters": {
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "Limits the request to the given number. Will at maximum return 1000 results.",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 1000,
          "default": 20
        }
      },
      "page": {
        "name": "page",
        "in": "query",
        "description": "Shows the requested page. The pagesize depends on the limit parameter.",
        "schema": {
          "type": "integer",
          "minimum": 0,
          "default": 0
        }
      },
      "sort": {
        "name": "sort",
        "in": "query",
        "description": "sorts the list by operation asc/desc",
        "schema": {
          "type": "string",
          "enum": [
            "asc",
            "desc"
          ]
        }
      },
      "orderBy": {
        "name": "orderBy",
        "in": "query",
        "description": "orders the list by the given attributes",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "createdBy": {
        "name": "createdBy",
        "in": "query",
        "description": "Equal filter",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "createdAt": {
        "name": "createdAt",
        "in": "query",
        "description": "filter: operators `gt:`,`gte:`,`lt:`,`lte`",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "updatedBy": {
        "name": "updatedBy",
        "in": "query",
        "description": "Equal filter",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "updatedAt": {
        "name": "updatedAt",
        "in": "query",
        "description": "filter: operators `gt:`,`gte:`,`lt:`,`lte`",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "bbox": {
        "name": "bbox",
        "in": "query",
        "explode": false,
        "schema": {
          "type": "array",
          "maxItems": 4,
          "minItems": 4,
          "items": {
            "type": "number"
          }
        }
      },
      "userId": {
        "name": "userId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "databaseId": {
        "name": "databaseId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "projectId": {
        "name": "projectId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "datasourceId": {
        "name": "datasourceId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "labels": {
        "name": "labels",
        "in": "query",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "priority": {
        "name": "priority",
        "in": "query",
        "schema": {
          "type": "integer",
          "minimum": 1
        }
      },
      "jobType": {
        "name": "jobType",
        "in": "query",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "jobId": {
        "name": "jobId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "operationSetIdQuery": {
        "name": "operationSetId",
        "in": "query",
        "schema": {
          "type": "string"
        }
      },
      "status": {
        "name": "status",
        "in": "query",
        "schema": {
          "type": "array",
          "items": {
            "type": "number"
          }
        }
      },
      "operationId": {
        "name": "operationId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "roleId": {
        "name": "roleId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "resourceId": {
        "name": "resourceId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "principalId": {
        "name": "principalId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "principalIds": {
        "name": "principalIds",
        "in": "query",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "minItems": 1
        }
      },
      "queryResourceId": {
        "name": "resourceId",
        "in": "query",
        "schema": {
          "type": "string"
        }
      },
      "queryRoleId": {
        "name": "roleId",
        "in": "query",
        "schema": {
          "type": "string"
        }
      },
      "queryPrincipalId": {
        "name": "principalId",
        "in": "query",
        "schema": {
          "type": "string"
        }
      },
      "queryPermissions": {
        "name": "permissions",
        "in": "query",
        "schema": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "loginCredentialId": {
        "name": "loginCredentialId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "dataBucketId": {
        "name": "dataBucketId",
        "schema": {
          "type": "string"
        },
        "in": "path",
        "required": true
      },
      "force": {
        "name": "force",
        "description": "force deleting or modifying of resources",
        "schema": {
          "type": "boolean"
        },
        "in": "query"
      },
      "overwrite": {
        "name": "overwrite",
        "description": "overwrite resource",
        "schema": {
          "type": "boolean"
        },
        "in": "query"
      },
      "objectKey": {
        "name": "key",
        "in": "query",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "scenarioId": {
        "name": "scenarioId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "appId": {
        "name": "appId",
        "schema": {
          "type": "string"
        },
        "in": "path",
        "required": true
      },
      "moduleId": {
        "name": "moduleId",
        "schema": {
          "type": "string"
        },
        "in": "path",
        "required": true
      },
      "memberId": {
        "name": "memberId",
        "in": "query",
        "schema": {
          "type": "string"
        }
      },
      "addonId": {
        "name": "addonId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "mapVersion": {
        "name": "mapVersion",
        "in": "query",
        "description": "a map version to request plugins for",
        "schema": {
          "type": "string"
        }
      },
      "versionRange": {
        "name": "version",
        "in": "query",
        "description": "a version range to request plugins by",
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "BaseModel": {
        "type": "object",
        "required": [
          "_id",
          "createdAt",
          "updatedAt",
          "createdBy",
          "updatedBy"
        ],
        "properties": {
          "_id": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string"
          },
          "updatedBy": {
            "type": "string"
          }
        }
      },
      "PaginatedList": {
        "type": "object",
        "required": [
          "page",
          "totalPages",
          "limit",
          "totalCount"
        ],
        "properties": {
          "page": {
            "type": "number"
          },
          "totalPages": {
            "type": "number"
          },
          "limit": {
            "type": "number"
          },
          "totalCount": {
            "type": "number"
          }
        }
      },
      "UserCreate": {
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "properties": {
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "format": "password"
          }
        }
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "format": "password"
          }
        }
      },
      "User": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          }
        ],
        "type": "object",
        "required": [
          "username"
        ],
        "properties": {
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "UserProfile": {
        "required": [
          "username",
          "_id"
        ],
        "properties": {
          "username": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          }
        }
      },
      "DatabaseUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "PostGIS",
              "Oracle"
            ]
          },
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "format": "password"
          },
          "host": {
            "type": "string"
          },
          "port": {
            "type": "integer"
          },
          "database": {
            "type": "string"
          },
          "schema": {
            "type": "string"
          }
        }
      },
      "DatabaseCreate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DatabaseUpdate"
          }
        ],
        "type": "object",
        "required": [
          "name",
          "type",
          "username",
          "password",
          "host",
          "port",
          "database"
        ]
      },
      "Database": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "$ref": "#/components/schemas/DatabaseCreate"
          }
        ],
        "type": "object"
      },
      "DatabaseWithoutSecret": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          }
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "PostGIS",
              "Oracle"
            ]
          },
          "host": {
            "type": "string"
          },
          "port": {
            "type": "integer"
          },
          "database": {
            "type": "string"
          },
          "schema": {
            "type": "string"
          }
        }
      },
      "ProjectSummary": {
        "type": "object",
        "properties": {
          "numberOfUsers": {
            "type": "number"
          },
          "numberOfDatabases": {
            "type": "number"
          },
          "numberOfDatasources": {
            "type": "number"
          }
        }
      },
      "ProjectUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "bbox": {
            "type": "array",
            "maxItems": 4,
            "minItems": 4,
            "items": {
              "type": "number"
            }
          },
          "properties": {
            "type": "object",
            "additionalProperties": {}
          }
        }
      },
      "ProjectCreate": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ProjectUpdate"
          }
        ],
        "required": [
          "name"
        ]
      },
      "Project": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "$ref": "#/components/schemas/ProjectCreate"
          },
          {
            "type": "object",
            "required": [
              "defaultDataBucketId",
              "bbox"
            ],
            "properties": {
              "defaultDataBucketId": {
                "type": "string"
              }
            }
          }
        ],
        "type": "object"
      },
      "DatasourcesSummary": {
        "type": "object",
        "properties": {
          "numberOfItems": {
            "type": "number"
          },
          "types": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "$ref": "#/components/schemas/DatasourcesTypeEnum"
                },
                "count": {
                  "type": "number"
                }
              }
            }
          },
          "createdByUsers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string"
                },
                "count": {
                  "type": "number"
                }
              }
            }
          },
          "updatedByUsers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string"
                },
                "count": {
                  "type": "number"
                }
              }
            }
          },
          "createdAtRange": {
            "$ref": "#/components/schemas/DateTimeRange"
          },
          "updatedAtRange": {
            "$ref": "#/components/schemas/DateTimeRange"
          }
        }
      },
      "DateTimeRange": {
        "type": "object",
        "properties": {
          "to": {
            "type": "string",
            "format": "date-time"
          },
          "from": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DatasourcesTypeEnum": {
        "type": "string",
        "enum": [
          "tileset",
          "tilesetupdate",
          "geojson",
          "oblique",
          "qmesh",
          "meshinmesh",
          "wms",
          "wmts",
          "tms",
          "vectortiles",
          "generic"
        ]
      },
      "DatasourceUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "bbox": {
            "type": "array",
            "maxItems": 4,
            "minItems": 4,
            "items": {
              "type": "number"
            }
          },
          "properties": {
            "type": "object",
            "additionalProperties": {}
          },
          "typeProperties": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/TilesetProperties"
              },
              {
                "$ref": "#/components/schemas/TilesetUpdateProperties"
              },
              {
                "$ref": "#/components/schemas/GeojsonProperties"
              },
              {
                "$ref": "#/components/schemas/ObliqueProperties"
              },
              {
                "$ref": "#/components/schemas/QMeshProperties"
              },
              {
                "$ref": "#/components/schemas/TerrainMeshInMeshProperties"
              },
              {
                "$ref": "#/components/schemas/WMSProperties"
              },
              {
                "$ref": "#/components/schemas/WMTSProperties"
              },
              {
                "$ref": "#/components/schemas/TMSProperties"
              },
              {
                "$ref": "#/components/schemas/GenericProperties"
              },
              {
                "$ref": "#/components/schemas/VectorTileProperties"
              }
            ],
            "type": "object"
          },
          "sourceProperties": {
            "type": "object",
            "oneOf": [
              {
                "type": "object",
                "required": [
                  "type",
                  "url"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "external"
                    ]
                  },
                  "url": {
                    "type": "string"
                  }
                }
              },
              {
                "type": "object",
                "required": [
                  "type",
                  "dataBucketId",
                  "dataBucketKey"
                ],
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "internal"
                    ]
                  },
                  "dataBucketId": {
                    "type": "string"
                  },
                  "dataBucketKey": {
                    "type": "string"
                  },
                  "urlSuffix": {
                    "type": "string"
                  }
                }
              }
            ]
          }
        }
      },
      "DatasourceCreate": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DatasourceUpdate"
          }
        ],
        "required": [
          "name",
          "type",
          "typeProperties",
          "sourceProperties"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/DatasourcesTypeEnum"
          }
        }
      },
      "Datasource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "$ref": "#/components/schemas/DatasourceCreate"
          }
        ],
        "type": "object",
        "required": [
          "properties",
          "projectId",
          "uri",
          "jobIds",
          "publishTaskIds",
          "dataUpdatedAt",
          "dataUpdatedBy"
        ],
        "properties": {
          "dataUpdatedAt": {
            "type": "string"
          },
          "dataUpdatedBy": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "uri": {
            "type": "string"
          },
          "jobIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "publishTaskIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GeojsonProperties": {
        "type": "object",
        "properties": {
          "projection": {
            "type": "object",
            "additionalProperties": {}
          },
          "altitudeMode": {
            "type": "string"
          },
          "heightAboveGround": {
            "type": "number"
          },
          "style": {
            "type": "object",
            "additionalProperties": {}
          },
          "features": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {}
            }
          }
        }
      },
      "TilesetProperties": {
        "type": "object",
        "properties": {
          "screenSpaceError": {
            "type": "integer"
          },
          "screenSpaceErrorMobile": {
            "type": "integer"
          },
          "pointSize": {
            "type": "integer"
          },
          "fromDbId": {
            "type": "string"
          }
        }
      },
      "TilesetUpdateProperties": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TilesetProperties"
          }
        ],
        "required": [
          "baseDatasourceId"
        ],
        "properties": {
          "baseDatasourceId": {
            "type": "string"
          }
        }
      },
      "ObliqueProperties": {
        "type": "object",
        "properties": {
          "hideLevels": {
            "type": "integer"
          },
          "projection": {
            "type": "object",
            "additionalProperties": {}
          },
          "minZoom": {
            "type": "integer"
          },
          "maxZoom": {
            "type": "integer"
          },
          "terrainDatasourceId": {
            "type": "string"
          }
        }
      },
      "QMeshProperties": {
        "type": "object",
        "properties": {
          "requestVertexNormals": {
            "type": "boolean"
          },
          "requestWaterMask": {
            "type": "boolean"
          }
        }
      },
      "VectorTileProperties": {
        "type": "object",
        "properties": {
          "minLevel": {
            "type": "integer"
          },
          "maxLevel": {
            "type": "integer"
          },
          "tileProvider": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "URLTemplateTileProvider",
                  "StaticGeoJSONTileProvider",
                  "MVTTileProvider"
                ]
              },
              "idProperty": {
                "type": "string"
              },
              "baseLevels": {
                "type": "array",
                "items": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "TerrainMeshInMeshProperties": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/QMeshProperties"
          }
        ],
        "required": [
          "baseDatasourceId"
        ],
        "properties": {
          "baseDatasourceId": {
            "type": "string"
          }
        }
      },
      "WMSProperties": {
        "type": "object",
        "properties": {
          "maxLevel": {
            "type": "integer"
          },
          "version": {
            "type": "string"
          },
          "format": {
            "type": "string"
          },
          "bgcolor": {
            "type": "string"
          },
          "transparent": {
            "type": "boolean"
          },
          "layers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "styles": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "parameters": {
            "type": "string"
          },
          "tilingSchema": {
            "type": "string",
            "enum": [
              "mercator",
              "geographic"
            ]
          },
          "featureInfo": {
            "type": "object",
            "additionalProperties": {}
          }
        }
      },
      "WMTSProperties": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string"
          },
          "minLevel": {
            "type": "integer"
          },
          "maxLevel": {
            "type": "integer"
          },
          "layer": {
            "type": "string"
          },
          "style": {
            "type": "string"
          },
          "tilingSchema": {
            "type": "string",
            "enum": [
              "mercator",
              "geographic"
            ]
          },
          "tileMatrixSetID": {
            "type": "string"
          },
          "tileMatrixPrefix": {
            "type": "string"
          },
          "numberOfLevelZeroTilesY": {
            "type": "integer"
          },
          "numberOfLevelZeroTilesX": {
            "type": "integer"
          }
        }
      },
      "TMSProperties": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string"
          },
          "minLevel": {
            "type": "integer"
          },
          "maxLevel": {
            "type": "integer"
          },
          "tileWidth": {
            "type": "integer"
          },
          "tileHeight": {
            "type": "integer"
          },
          "tilingSchema": {
            "type": "string",
            "enum": [
              "mercator",
              "geographic"
            ]
          }
        }
      },
      "GenericProperties": {
        "type": "object",
        "additionalProperties": {}
      },
      "TokenResponse": {
        "type": "object",
        "required": [
          "_id",
          "token",
          "tokenExpires"
        ],
        "properties": {
          "_id": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "tokenExpires": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DeletedResponse": {
        "type": "object",
        "properties": {
          "numberOfDeletedItems": {
            "type": "integer"
          }
        }
      },
      "Role": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          }
        ],
        "required": [
          "name",
          "permissions"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RoleSummary": {
        "type": "object",
        "required": [
          "_id",
          "permissions"
        ],
        "properties": {
          "_id": {
            "type": "string"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PrincipalWithPermissions": {
        "type": "object",
        "required": [
          "principalId",
          "username",
          "roles"
        ],
        "properties": {
          "principalId": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoleSummary"
            }
          }
        }
      },
      "BaseJobModel": {
        "type": "object",
        "properties": {
          "status": {
            "type": "number",
            "format": "integer",
            "minimum": 1,
            "maximum": 6,
            "description": "1 = PENDING, 2 = RUNNING, 3 = FINISHED, 4 = FAILED, 5 = CANCELLED, 6 = TIMED_OUT"
          },
          "labels": {
            "type": "array",
            "description": "arbitrary labels to narrow runner search",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "object",
            "description": "arbitrary tags used for filtering and cost tracking"
          },
          "debugLevel": {
            "type": "number",
            "format": "integer",
            "minimum": 0,
            "maximum": 2,
            "description": "0 = NONE, 1 = VERBOSE, 2 = NO_CLEANUP"
          }
        }
      },
      "Task": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          }
        ],
        "required": [
          "jobType",
          "jobVersion",
          "schedule",
          "priority",
          "parameters",
          "projectId",
          "labels",
          "tags",
          "debugLevel",
          "properties"
        ],
        "properties": {
          "labels": {
            "type": "array",
            "description": "arbitrary labels to narrow runner search",
            "items": {
              "type": "string"
            }
          },
          "properties": {
            "type": "object",
            "additionalProperties": {}
          },
          "tags": {
            "type": "object",
            "description": "arbitrary tags used for filtering and cost tracking"
          },
          "debugLevel": {
            "type": "number",
            "format": "integer",
            "minimum": 0,
            "maximum": 2,
            "description": "0 = NONE, 1 = VERBOSE, 2 = NO_CLEANUP"
          },
          "jobType": {
            "type": "string"
          },
          "jobVersion": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "lastJobId": {
            "type": "string"
          },
          "priority": {
            "type": "number",
            "minimum": 1
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {}
          },
          "schedule": {
            "$ref": "#/components/schemas/TaskSchedule"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "CronSchedule": {
        "type": "object",
        "required": [
          "type",
          "scheduled",
          "cron"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "cron"
            ]
          },
          "scheduled": {
            "type": "string",
            "format": "date-time"
          },
          "cron": {
            "type": "string"
          },
          "suspended": {
            "type": "boolean"
          }
        }
      },
      "TaskSchedule": {
        "type": "object",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "immediate"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "scheduled"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "scheduled"
                ]
              },
              "scheduled": {
                "type": "string",
                "format": "date-time"
              }
            }
          },
          {
            "$ref": "#/components/schemas/CronSchedule"
          }
        ]
      },
      "TaskCommon": {
        "type": "object",
        "properties": {
          "labels": {
            "type": "array",
            "description": "arbitrary labels to narrow runner search",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "tags": {
            "type": "object",
            "description": "arbitrary tags used for filtering and cost tracking",
            "additionalProperties": {}
          },
          "debugLevel": {
            "type": "number",
            "format": "integer",
            "minimum": 0,
            "maximum": 2,
            "description": "0 = NONE, 1 = VERBOSE, 2 = NO_CLEANUP"
          },
          "priority": {
            "type": "number",
            "minimum": 1
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {}
          },
          "properties": {
            "type": "object",
            "additionalProperties": {}
          }
        }
      },
      "TaskCreate": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SyncTaskCreate"
          }
        ],
        "required": [
          "schedule"
        ],
        "properties": {
          "schedule": {
            "$ref": "#/components/schemas/TaskSchedule"
          }
        }
      },
      "TaskUpdate": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TaskCommon"
          }
        ],
        "properties": {
          "schedule": {
            "$ref": "#/components/schemas/TaskSchedule"
          }
        }
      },
      "SyncTaskCreate": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/TaskCommon"
          }
        ],
        "required": [
          "name",
          "jobType",
          "parameters"
        ],
        "properties": {
          "jobType": {
            "type": "string"
          },
          "jobVersion": {
            "type": "string"
          }
        }
      },
      "LastJob": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "status": {
            "type": "number",
            "format": "integer",
            "minimum": 1,
            "maximum": 6,
            "description": "1 = PENDING, 2 = RUNNING, 3 = FINISHED, 4 = FAILED, 5 = CANCELLED, 6 = TIMED_OUT"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Job": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "$ref": "#/components/schemas/BaseJobModel"
          }
        ],
        "required": [
          "jobType",
          "jobVersion",
          "jobStages",
          "taskId",
          "priority",
          "parameters",
          "projectId"
        ],
        "properties": {
          "jobType": {
            "type": "string"
          },
          "jobVersion": {
            "type": "string"
          },
          "jobStages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "currentJobStage": {
            "type": "string"
          },
          "taskId": {
            "type": "string"
          },
          "projectId": {
            "type": "string"
          },
          "priority": {
            "type": "number"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {}
          },
          "outputs": {
            "type": "object",
            "additionalProperties": {}
          },
          "errorMessage": {
            "type": "string"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "OperationSet": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "$ref": "#/components/schemas/BaseJobModel"
          }
        ],
        "required": [
          "jobId",
          "jobCreatedAt",
          "priority",
          "operations",
          "jobStage",
          "operationSetStages"
        ],
        "properties": {
          "jobId": {
            "type": "string"
          },
          "jobStage": {
            "type": "string"
          },
          "operationSetStages": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "currentOperationSetStage": {
            "type": "string"
          },
          "priority": {
            "type": "number"
          },
          "jobCreatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "operations": {
            "type": "object",
            "description": "Key value storage of operation name and version range"
          },
          "lastPing": {
            "type": "string",
            "format": "date-time"
          },
          "minCpu": {
            "type": "number",
            "format": "integer"
          },
          "minMem": {
            "type": "number"
          }
        }
      },
      "Operation": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "$ref": "#/components/schemas/BaseJobModel"
          }
        ],
        "required": [
          "operationType",
          "operationVersion",
          "operationSetStage",
          "operationSetId",
          "jobId",
          "parameters",
          "startTime"
        ],
        "properties": {
          "operationSetId": {
            "type": "string"
          },
          "jobId": {
            "type": "string"
          },
          "operationType": {
            "type": "string"
          },
          "operationVersion": {
            "type": "string"
          },
          "operationSetStage": {
            "type": "string"
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {}
          },
          "errorMessage": {
            "type": "string"
          },
          "outputs": {
            "type": "object",
            "additionalProperties": {}
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "LoginCredential": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "aws",
              "userPassword",
              "sshKey"
            ]
          },
          "name": {
            "type": "string"
          },
          "access": {
            "type": "string"
          }
        }
      },
      "LoginCredentialResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "$ref": "#/components/schemas/LoginCredential"
          }
        ]
      },
      "LoginCredentialRequest": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/LoginCredential"
          }
        ],
        "required": [
          "type",
          "name",
          "access",
          "secret"
        ],
        "properties": {
          "secret": {
            "type": "string"
          },
          "passphrase": {
            "type": "string"
          }
        }
      },
      "DataBucketCreate": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/DataBucketUpdate"
          }
        ],
        "required": [
          "name"
        ]
      },
      "DataBucketUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {}
          }
        }
      },
      "DataBucket": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "$ref": "#/components/schemas/DataBucketCreate"
          }
        ],
        "required": [
          "projectId"
        ],
        "properties": {
          "projectId": {
            "type": "string"
          }
        }
      },
      "DataBucketObject": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "file",
              "directory"
            ]
          }
        },
        "required": [
          "key",
          "type"
        ]
      },
      "ProjectCredentialCreate": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "fs"
                ]
              },
              "gzip": {
                "type": "boolean"
              },
              "defaultPath": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "type",
              "gzip",
              "defaultPath"
            ]
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "ftp"
                ]
              },
              "gzip": {
                "type": "boolean"
              },
              "defaultPath": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "port": {
                "type": "number"
              },
              "loginId": {
                "type": "string"
              },
              "noTLS": {
                "type": "boolean"
              }
            },
            "required": [
              "name",
              "type",
              "gzip",
              "host",
              "loginId",
              "noTLS"
            ]
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "sftp"
                ]
              },
              "gzip": {
                "type": "boolean"
              },
              "defaultPath": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "port": {
                "type": "number"
              },
              "loginId": {
                "type": "string"
              }
            },
            "required": [
              "name",
              "type",
              "gzip",
              "defaultPath",
              "host",
              "loginId"
            ]
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "type": {
                "type": "string",
                "enum": [
                  "s3"
                ]
              },
              "gzip": {
                "type": "boolean"
              },
              "defaultPath": {
                "type": "string"
              },
              "endpoint": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "loginId": {
                "type": "string"
              },
              "region": {
                "type": "string"
              },
              "params": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "name",
              "type",
              "gzip",
              "host",
              "loginId"
            ]
          }
        ]
      },
      "ProjectCredentialUpdate": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "gzip": {
                "type": "boolean"
              },
              "defaultPath": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "gzip": {
                "type": "boolean"
              },
              "defaultPath": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "port": {
                "type": "number"
              },
              "loginId": {
                "type": "string"
              },
              "noTLS": {
                "type": "boolean"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "gzip": {
                "type": "boolean"
              },
              "defaultPath": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "port": {
                "type": "number"
              },
              "loginId": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "gzip": {
                "type": "boolean"
              },
              "defaultPath": {
                "type": "string"
              },
              "endpoint": {
                "type": "string"
              },
              "host": {
                "type": "string"
              },
              "loginId": {
                "type": "string"
              },
              "region": {
                "type": "string"
              },
              "params": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "ProjectCredentialResponse": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "$ref": "#/components/schemas/ProjectCredentialCreate"
          }
        ],
        "properties": {
          "projectId": {
            "type": "string"
          }
        },
        "required": [
          "projectId"
        ]
      },
      "ScenarioUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "public": {
            "type": "boolean"
          },
          "config": {
            "type": "object",
            "additionalProperties": {}
          },
          "properties": {
            "type": "object",
            "additionalProperties": {}
          }
        }
      },
      "ScenarioCreate": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ScenarioUpdate"
          }
        ],
        "required": [
          "name"
        ]
      },
      "Scenario": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "$ref": "#/components/schemas/ScenarioCreate"
          }
        ],
        "required": [
          "projectId",
          "config",
          "public",
          "properties",
          "publishTaskIds"
        ],
        "properties": {
          "projectId": {
            "type": "string"
          },
          "publishTaskIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "AppCreate": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AppUpdate"
          }
        ],
        "required": [
          "name"
        ]
      },
      "AppUpdate": {
        "type": "object",
        "properties": {
          "mapVersion": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {}
          },
          "moduleIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "App": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "$ref": "#/components/schemas/AppCreate"
          }
        ],
        "required": [
          "projectId",
          "properties",
          "moduleIds",
          "mapVersion",
          "publishTaskIds"
        ],
        "properties": {
          "projectId": {
            "type": "string"
          },
          "publishTaskIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CompiledApp": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/App"
          },
          {
            "type": "object",
            "properties": {
              "modules": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Module"
                }
              }
            }
          }
        ],
        "required": [
          "modules"
        ]
      },
      "ModuleCreate": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ModuleUpdate"
          }
        ],
        "required": [
          "name"
        ]
      },
      "ModuleUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {}
          },
          "layers": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {}
            }
          },
          "maps": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {}
            }
          },
          "styles": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {}
            }
          },
          "viewpoints": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {}
            }
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {}
            }
          },
          "obliqueCollections": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {}
            }
          },
          "plugins": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {}
            }
          },
          "contentTree": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {}
            }
          },
          "featureInfo": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {}
            }
          },
          "i18n": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {}
            }
          },
          "uiConfig": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {}
            }
          },
          "projection": {
            "type": "object",
            "nullable": true,
            "additionalProperties": {}
          },
          "startingMapName": {
            "type": "string",
            "nullable": true
          },
          "startingViewpointName": {
            "type": "string",
            "nullable": true
          },
          "startingObliqueCollectionName": {
            "type": "string",
            "nullable": true
          },
          "hiddenObjects": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {}
            }
          },
          "flights": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {}
            }
          }
        }
      },
      "Module": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "$ref": "#/components/schemas/ModuleCreate"
          }
        ],
        "required": [
          "properties",
          "projectId"
        ],
        "properties": {
          "projectId": {
            "type": "string"
          }
        }
      },
      "AppApacheConfigUpdate": {
        "type": "object",
        "properties": {
          "htaccess": {
            "type": "string"
          },
          "htpasswd": {
            "type": "string"
          }
        }
      },
      "AppApacheConfig": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AppApacheConfigUpdate"
          }
        ],
        "required": [
          "htaccess",
          "htpasswd",
          "appId"
        ],
        "properties": {
          "appId": {
            "type": "string"
          }
        }
      },
      "PluginRegistryEntry": {
        "type": "object",
        "required": [
          "name",
          "versions"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "versions": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "version",
                "createdAt",
                "hasReadme",
                "hasChangelog",
                "mapVersion"
              ],
              "properties": {
                "createdAt": {
                  "type": "string",
                  "format": "date-time"
                },
                "version": {
                  "type": "string"
                },
                "hasReadme": {
                  "type": "boolean"
                },
                "hasChangelog": {
                  "type": "boolean"
                },
                "mapVersion": {
                  "type": "string"
                },
                "license": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "CommonPublishParameters": {
        "type": "object",
        "required": [
          "credentialsId",
          "destination"
        ],
        "properties": {
          "credentialsId": {
            "type": "string"
          },
          "destination": {
            "type": "string"
          },
          "numThreads": {
            "type": "number"
          },
          "gzip": {
            "type": "boolean"
          }
        }
      },
      "AddonTypeEnum": {
        "type": "string",
        "enum": [
          "pointcloud",
          "oblique",
          "solar"
        ]
      },
      "AddonUpdate": {
        "type": "object",
        "properties": {
          "licenseKey": {
            "type": "string"
          },
          "offlineLicense": {
            "type": "string"
          }
        }
      },
      "AddonCreate": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/AddonUpdate"
          }
        ],
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AddonTypeEnum"
          }
        }
      },
      "Addon": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "$ref": "#/components/schemas/AddonCreate"
          }
        ],
        "properties": {
          "validity": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
